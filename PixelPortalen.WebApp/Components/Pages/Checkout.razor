@page "/checkout"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using PixelPortalen.Application.Interfaces
@using PixelPortalen.Domain.Entities
@using System.Text.Json
@using PixelPortalen.Infrastructure.DataAccess.Auth
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IOrderService<OrderEntity> OrderService
@inject ISwishService<SwishEntity> SwishService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Checkout</MudText>
<MudGrid Spacing="6" Class="mt-16">
    <MudItem Class="order-2 order-lg-1" lg="7" xs="12">
        <MudPaper Class="p-5">
        <MudText Typo="Typo.h5" GutterBottom="true">Billing address</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField T="string" Label="Email" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string" Label="Mobile number" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string" Label="Personal number" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="string" Label="First name" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="string" Label="Last name" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField T="string" Label="Address" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="string" Label="Postal code" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField T="string" Label="Postal Area" />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton OnClick="@Swish" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Betala med Swish</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    </MudItem>
    <MudItem Class="order-1 order-lg-2" lg="5" xs="12">
        <MudPaper Class="d-flex flex-column p-5" Style="height:100%;" Outlined="true">
            <MudText Typo="Typo.h5" GutterBottom="true">Cart</MudText>
            @if (Cart.Count == 0)
            {
                <MudList>
                    <MudListItem Icon="@Icons.Material.Filled.Blind">
                        <div class="d-flex">
                            <MudText>Ajdå! Här vart det tomt</MudText>
                            <MudText Inline="true" Class="ml-auto"></MudText>
                        </div>
                    </MudListItem>
                </MudList>

            }
            else
            {
                <MudList Clickable="true">
                    <MudVirtualize Items="Cart" Context="cartItem">
                        <MudListItem Icon="@Icons.Material.Filled.Backpack">
                            <MudStack AlignItems="AlignItems.Center" Row="true">
                                <MudText>@cartItem.Name</MudText>
                                <MudText Class="ml-auto">@cartItem.Price kr</MudText>
                                <MudSpacer></MudSpacer>
                                <MudText>Antal: 1</MudText>
                                <MudIconButton Class="" OnClick="@(() => RemoveFromCart(cartItem))" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                            </MudStack>
                        </MudListItem>
                    </MudVirtualize>
                </MudList>
            }
            <div class="mt-auto">
                <MudDivider/>
                <div class="d-flex pa-4">
                    <MudText>Total:</MudText>
                    <MudText Class="ml-auto"><b>@Total kr</b></MudText>
                </div>
            </div>


        </MudPaper>
    </MudItem>
</MudGrid>


@code {

    public Guid OrderId { get; set; }
    public List<ProductEntity> Cart { get; set; } = new();
    public bool isConnected { get; set; }
    public double Total { get; set; }
    public OrderEntity OrderEntity { get; set; } = new();
    public SwishEntity SwishEntity { get; set; } = new();
    public HttpContent HttpContent { get; set; } = new StringContent("");
    string ImageSource => ImageBytes != null ? $"data:image;base64,{Convert.ToBase64String(ImageBytes)}" : "";
    byte[] ImageBytes;
    public ApplicationUser ApplicationUser { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadStateAsync();
            foreach (var productEntity in Cart)
            {
                Total += productEntity.Price;
            }
            StateHasChanged();
            
        }
    }



    private async Task LoadStateAsync()
    {
        var order = await ProtectedLocalStore.GetAsync<OrderEntity>("order");
        OrderEntity = order.Success ? order.Value : OrderEntity = null;
        if (OrderEntity == null)
        {
            var user = await ProtectedLocalStore.GetAsync<ApplicationUser>("user");
            ApplicationUser = user.Success ? user.Value : ApplicationUser = null;
            var userOrders = await OrderService.GetByUserIdAsync(ApplicationUser.Id);
            OrderEntity = userOrders.FirstOrDefault(o => o.Open);
        }

        

        var cartResult = await ProtectedLocalStore.GetAsync<List<ProductEntity>>("cart");
        Cart = cartResult.Success ? cartResult.Value : Cart = new List<ProductEntity>();

    }

    
    public async Task RemoveFromCart(ProductEntity product)
    {
        var orderItem = OrderEntity.OrderItems.FirstOrDefault(p => p.ProductId == product.Id);
        if (orderItem != null)
        {
            OrderEntity.OrderItems.Remove(orderItem);
            await OrderService.DeleteOrderItemAsync(orderItem);
            await ProtectedLocalStore.SetAsync("order", OrderEntity);
        }
        



        
        Cart.Remove(Cart.FirstOrDefault(p => p.Id == product.Id));
        await ProtectedLocalStore.SetAsync("cart", Cart);
        Total = 0;
        foreach (var productEntity in Cart)
        {
            Total += productEntity.Price;
        }

        StateHasChanged();

    }

    public async Task Swish()
    {
        SwishEntity.format = "png";
        SwishEntity.amount = new Amount();
        SwishEntity.amount.value = 1;
        // var amount = Total.ToString().Split(',')[0]; // This is a workaround for the swish api, it does not accept decimal values.
        // SwishEntity.amount.value = int.Parse(amount); // Commenting this because project is in testing phase.
        SwishEntity.message = new Message();
        SwishEntity.payee = new Payee();
        string serializedSwishEntity = JsonSerializer.Serialize(SwishEntity);
        string encodedSwishEntity = System.Net.WebUtility.UrlEncode(serializedSwishEntity);

        await OrderService.ChangeStatus(OrderEntity);
        await ProtectedLocalStore.DeleteAsync("order");
        await ProtectedLocalStore.DeleteAsync("cart");
        NavigationManager.NavigateTo($"/payment?data={encodedSwishEntity}");
        StateHasChanged();


    

    }
}
